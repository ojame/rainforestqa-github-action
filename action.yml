name: Rainforest QA GitHub Action
description: Easily trigger a Rainforest Run from your GitHub workflows
inputs:
  description:
    description: An arbitrary string to associate with the run
    required: false
    default: ''

  run_group_id:
    description: Only run tests tied to this Run Group
    required: true

  environment_id:
    description: Use a specific environment for this run
    required: false
    default: ''

  custom_url:
    description: Use a specific URL for this run
    required: false
    default: ''

  conflict:
    description: How other currently in-progress runs should be handled. Values are `cancel` to cancel runs in the same environment as your new run and `cancel-all` to cancel all runs
    required: false
    default: ''

  execution_method:
    description: The execution method to use for this run
    required: false
    default: ''

  crowd:
    description: "DEPRECATED: Use `execution_method` instead"
    required: false
    default: ''

  release:
    description: Manually entered release information about the release the run is associated with
    required: false
    default: ''

  token:
    description: Your Rainforest QA API token
    required: true

  dry_run:
    description: Set to true to run parameter validations without starting a new Rainforest run
    required: false
    default: ''

  background:
    description: Do not wait for a run to complete before exiting
    required: false
    default: ''

  automation_max_retries:
    description: If set to a value > 0 and a test fails, it will be retried within the same run, up to that number of times
    required: false
    default: ''

outputs:
  command:
    description: The CLI command that was run
    value: ${{ steps.validate.outputs.command }}
  error:
    description: The validation error that was raised
    value: ${{ steps.validate.outputs.error }}

runs:
  using: composite
  steps:
    - name: Set Action Version
      shell: bash
      run: |
        echo "version=2.1.0" >> $GITHUB_ENV
    - name: Check for reruns
      uses: pat-s/always-upload-cache@v2
      if: (! inputs.dry_run)
      with:
        key: rainforest-run-${{ github.run_number }}-${{ github.run_attempt }}
        path: .rainforest_run_id
        restore-keys: |
          rainforest-run-${{ github.run_number }}-
    - name: Validate Parameters
      shell: bash
      id: validate
      run: |
        # Show Action Version
        echo "Using Rainforest GitHub Action v${{ env.version }}"

        # Ensure results directory is there
        mkdir -p results/rainforest

        echo "::add-mask::${{ inputs.token }}"

        # Define error helper
        error () {
          echo "::error ::${1}"
          echo "::set-output name=error::${1}"
          exit 1
        }

        # Validate token
        if [ -z "${{ inputs.token }}" ] ; then
          error "Token not set"
        fi

        # Validate run_group_id
        if ! echo "${{ inputs.run_group_id }}" | grep -Eq '^[0-9]+$' ; then
          error "run_group_id not a positive integer (${{ inputs.run_group_id }})"
        fi

        # Check for rerun
        if [ -s .rainforest_run_id ] ; then
          RAINFOREST_RUN_ID=$(cat .rainforest_run_id)
          rm .rainforest_run_id
          echo "Rerunning Run ${RAINFOREST_RUN_ID}"

          RUN_COMMAND="rerun \"${RAINFOREST_RUN_ID}\" --skip-update --token \"${{ inputs.token }}\" --junit-file results/rainforest/junit.xml --save-run-id .rainforest_run_id"
        else
          RUN_COMMAND="run --skip-update --token \"${{ inputs.token }}\" --run-group ${{ inputs.run_group_id }} --junit-file results/rainforest/junit.xml --save-run-id .rainforest_run_id"
        fi

        # Validate conflict
        if [ -n "${{ inputs.conflict }}" ] ; then
          case "${{ inputs.conflict }}" in
            cancel) ;&
            cancel-all)
              RUN_COMMAND="${RUN_COMMAND} --conflict ${{ inputs.conflict }}"
            ;;
            *)
              error "${{ inputs.conflict }} not in (cancel cancel-all)"
            ;;
          esac
        fi

        # Set custom_url, or validate and set environment_id
        if [ -z "${RAINFOREST_RUN_ID}" ] && [ -n "${{ inputs.custom_url }}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --custom-url \"${{ inputs.custom_url }}\""
          if [ -n "${{ inputs.environment_id }}" ] ; then
            echo "::warning title=Environment ID Ignored::You've set values for the mutually exclusive custom_url and environment_id parameters. Unset one of these to fix this warning."
          fi
        elif [ -z "${RAINFOREST_RUN_ID}" ] && [ -n "${{ inputs.environment_id }}" ] ; then
          if echo "${{ inputs.environment_id }}" | grep -Eq '^[0-9]+$' ; then
            RUN_COMMAND="${RUN_COMMAND} --environment-id ${{ inputs.environment_id }}"
          else
            error "environment_id not a positive integer (${{ inputs.environment_id }})"
          fi
        fi

        # Validate execution_method / crowd
        if [ -z "${RAINFOREST_RUN_ID}" ] ; then
          if [ -n "${{ inputs.execution_method }}" ] ; then
            case "${{ inputs.execution_method }}" in
              automation) ;&
              crowd) ;&
              automation_and_crowd) ;&
              on_premise)
                RUN_COMMAND="${RUN_COMMAND} --execution-method ${{ inputs.execution_method }}"
              ;;
              *)
                error "${{ inputs.execution_method }} not in (automation crowd automation_and_crowd on_premise)"
              ;;
            esac
          fi

          if [ -n "${{ inputs.crowd }}" ] ; then
            echo "::warning The 'crowd' parameter is deprecated, use 'execution_method' instead."
            if [ -n "${{ inputs.execution_method }}" ] ; then
              error "Error: execution_method and crowd are mutually exclusive"
            fi

            case "${{ inputs.crowd }}" in
              default) ;&
              automation) ;&
              automation_and_crowd) ;&
              on_premise_crowd)
                RUN_COMMAND="${RUN_COMMAND} --crowd ${{ inputs.crowd }}"
              ;;
              *)
                error "${{ inputs.crowd }} not in (default automation automation_and_crowd on_premise_crowd)"
              ;;
            esac
          fi
        fi

        # Set description
        if [ -z "${RAINFOREST_RUN_ID}" ] && [ -n "${{ inputs.description }}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --description \"${{ inputs.description }}\""
        elif [ -z "${RAINFOREST_RUN_ID}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --description \"${GITHUB_REPOSITORY} - ${GITHUB_REF_NAME} ${GITHUB_JOB} $(date -u +'%FT%TZ')\""
        fi

        # Set release
        if [ -n "${{ inputs.release }}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --release \"${{ inputs.release }}\""
        elif [ -z "${RAINFOREST_RUN_ID}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --release \"${GITHUB_SHA}\""
        fi

        # Set background
        if [ -n "${{ inputs.background }}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --background"
        fi

        # Set automation_max_retries
        if [ -n "${{ inputs.automation_max_retries }}" ] ; then
          RUN_COMMAND="${RUN_COMMAND} --automation-max-retries ${{ inputs.automation_max_retries }}"
        fi

        echo "::set-output name=command::${RUN_COMMAND}"

    - name: Run Rainforest
      uses: docker://gcr.io/rf-public-images/rainforest-cli:latest
      if: (! inputs.dry_run)
      env:
        GH_ACTION_VERSION: ${{ env.version }}
      with:
        args: ${{ steps.validate.outputs.command }}
    - name: Archive Rainforest results
      uses: actions/upload-artifact@v2
      if: (! inputs.dry_run) && steps.validate.outputs.command && always()
      with:
        name: Test Results
        path: results/rainforest/junit.xml
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v2
      if: (! inputs.dry_run) && steps.validate.outputs.command && always()
      with:
        check_name: Rainforest Results
        report_paths: results/rainforest/junit.xml
